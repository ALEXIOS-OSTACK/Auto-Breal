--[[  Cultivate Bot — Ultimate Card UI (All-in-One)
     วางเป็น LocalScript ใน StarterPlayerScripts

     อ่าน Progress จาก UI:
       PlayerGui.ScreenGui.Sidebar.Stats.StatsFrame.LowerStats.Percentage (TextLabel)

     ฟีเจอร์:
       - Card UI (Cream-Gold) + Dark Jade Theme
       - Progress bar + %
       - Start/Stop (F8) + Hide (RightShift) + Minimize (Ribbon-only)
       - Drag + edge snapping
       - Auto-Recover ถ้า progress ไม่ขยับ, Failsafe 2 นาที restart
       - Rebind อัตโนมัติ + ปุ่ม Rebind
       - MiniLog 5 รายการ + Remote status
       - Save settings via Player Attributes (ตำแหน่ง/ธีม/interval/timeout/startOnJoin/minimized)
       - Responsive (แคบ → 2 แถว)
--]]

-------------------- Services / Shortcuts --------------------
local RS, Players, UIS, TweenS, StarterGui, RunS =
    game:GetService("ReplicatedStorage"),
    game:GetService("Players"),
    game:GetService("UserInputService"),
    game:GetService("TweenService"),
    game:GetService("StarterGui"),
    game:GetService("RunService")

local player = Players.LocalPlayer
local pg = player:WaitForChild("PlayerGui")

--------------- Remotes / UI source (safe find) -------------
local function safeWait(parent, name, t)
    t = t or 10
    local st = os.clock()
    local obj = parent:FindFirstChild(name)
    while not obj and os.clock() - st < t do
        local conn; conn = parent.ChildAdded:Connect(function(c) if c.Name==name then obj=c end end)
        task.wait(0.1); conn:Disconnect()
        obj = obj or parent:FindFirstChild(name)
    end
    return obj
end

local RemoteEvents = safeWait(RS, "RemoteEvents", 10)
local CultivationEvent = RemoteEvents and safeWait(RemoteEvents, "CultivationEvent", 10)

---------------------- Config (defaults) ---------------------
local DEFAULTS = {
    CHECK_INTERVAL   = 0.5,
    STAND_UP_DELAY   = 0.5,
    BREAK_DURATION   = 2.0,
    BREAK_DEBOUNCE   = 3.0,
    RECOVERY_TIMEOUT = 6.0,
    RECOVERY_COOLDOWN= 4.0,
    START_ON_JOIN    = false,
    THEME            = "cream", -- "cream" | "jade"
}

-- Persist helpers
local function getAttr(name, fallback)
    local v = player:GetAttribute(name)
    return v ~= nil and v or fallback
end
local function setAttr(name, v)
    pcall(function() player:SetAttribute(name, v) end)
end

-- load settings
local CHECK_INTERVAL    = getAttr("CBot_Interval", DEFAULTS.CHECK_INTERVAL)
local STAND_UP_DELAY    = DEFAULTS.STAND_UP_DELAY
local BREAK_DURATION    = DEFAULTS.BREAK_DURATION
local BREAK_DEBOUNCE    = DEFAULTS.BREAK_DEBOUNCE
local RECOVERY_TIMEOUT  = getAttr("CBot_Recover", DEFAULTS.RECOVERY_TIMEOUT)
local RECOVERY_COOLDOWN = DEFAULTS.RECOVERY_COOLDOWN
local START_ON_JOIN     = getAttr("CBot_Start", DEFAULTS.START_ON_JOIN)
local THEME             = getAttr("CBot_Theme", DEFAULTS.THEME)
local SAVED_POS         = player:GetAttribute("CBot_Pos") -- Vector2 (x,y)
local SAVED_MINIMIZED   = player:GetAttribute("CBot_Min") or false

---------------------- State variables -----------------------
local running       = false
local isMeditating  = false
local isBreakingNow = false
local lastBreakTime = 0
local breakCount    = 0

local lastRecoverTry= 0
local lastPercent   = nil
local lastChangeAt  = os.clock()
local lastAnyBreakAt= os.clock()

local progressLabel = nil
local minimized     = false
local miniLog       = {}  -- {text, time} keep max 5

local throttleUntil = 0   -- button throttle

---------------------- Util / Logging ------------------------
local function pushLog(msg)
    table.insert(miniLog, 1, string.format("[%s] %s", os.date("!%H:%M:%S"), msg))
    while #miniLog > 5 do table.remove(miniLog) end
end

local function notify(txt)
    pcall(function()
        StarterGui:SetCore("SendNotification", {Title="CultivateBot", Text=txt, Duration=2.5})
    end)
    pushLog(txt)
end

local function fire(action)
    if not CultivationEvent then pushLog("Remote ❌: CultivationEvent not found"); return end
    local ok, err = pcall(function() CultivationEvent:FireServer(action) end)
    if not ok then pushLog("Fire "..action.." failed: "..tostring(err)) end
end

---------------------- Progress reading ----------------------
local PROGRESS_PATH = {"PlayerGui","ScreenGui","Sidebar","Stats","StatsFrame","LowerStats","Percentage"}

local function findProgressLabel()
    -- event-first binding: try fast find; DescendantAdded will also hook
    local node = player
    for _, name in ipairs(PROGRESS_PATH) do
        node = node and node:FindFirstChild(name)
        if not node then return nil end
    end
    return node:IsA("TextLabel") and node or nil
end

-- support: "Progress : 1" (0..1) OR "Progress : 87%" OR "87%"
local function parseProgress()
    if not progressLabel then return 0,"0" end
    local t = progressLabel.Text or ""
    local num = t:match("Progress%s*:%s*([%d%.]+)") or t:match("([%d%.]+)") or "0"
    local raw = tonumber(num) or 0
    local pct = (t:find("%%") or raw > 1) and math.clamp(raw,0,100) or math.clamp(raw*100,0,100)
    local original = t:find("%%") and (num.."%") or num
    return pct, original
end

---------------------- Sounds (toggle-able) ------------------
local soundOn = getAttr("CBot_Sound", true)
local soundFolder = Instance.new("Folder"); soundFolder.Name = "CBotSounds"; soundFolder.Parent = pg
local function makeSound(id, vol)
    local s = Instance.new("Sound")
    s.Volume = vol or 0.4
    s.SoundId = id
    s.Parent = soundFolder
    return s
end
local sStart = makeSound("rbxassetid://9118823107", 0.35)   -- soft beep
local sBreak = makeSound("rbxassetid://9118822011", 0.45)   -- bell

local function play(snd) if soundOn then pcall(function() snd:Play() end) end end

--------------------------- UI -------------------------------
-- theme palettes
local P = {
    cream = {
        panel   = Color3.fromRGB(250,244,234),
        card    = Color3.fromRGB(255,249,240),
        headA   = Color3.fromRGB(252,234,210),
        headB   = Color3.fromRGB(244,221,192),
        stroke  = Color3.fromRGB(214,179,117),
        text    = Color3.fromRGB(100,70,40),
        accentA = Color3.fromRGB(255,190,120),
        accentB = Color3.fromRGB(235,110,80),
        ribbon  = Color3.fromRGB(248,223,184),
        statusWait = Color3.fromRGB(120,90,60),
        statusMed  = Color3.fromRGB(40,160,120),
        statusBreak= Color3.fromRGB(200,100,40),
        barBg  = Color3.fromRGB(240,220,190),
        barFg  = Color3.fromRGB(230,160,60),
    },
    jade = {
        panel   = Color3.fromRGB(26,32,36),
        card    = Color3.fromRGB(32,40,46),
        headA   = Color3.fromRGB(46,58,64),
        headB   = Color3.fromRGB(38,50,56),
        stroke  = Color3.fromRGB(170,140,70),
        text    = Color3.fromRGB(230,230,220),
        accentA = Color3.fromRGB(70,180,150),
        accentB = Color3.fromRGB(40,130,110),
        ribbon  = Color3.fromRGB(36,44,48),
        statusWait = Color3.fromRGB(200,200,190),
        statusMed  = Color3.fromRGB(120,200,170),
        statusBreak= Color3.fromRGB(255,170,90),
        barBg  = Color3.fromRGB(55,65,70),
        barFg  = Color3.fromRGB(70,180,150),
    }
}
local palette = P[THEME] or P.cream

local gui = Instance.new("ScreenGui")
gui.Name = "CultivateBot_Ult"
gui.ResetOnSpawn = false
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.Parent = pg

local root = Instance.new("Frame")
root.Size = UDim2.fromOffset(780, 240)
root.Position = SAVED_POS and UDim2.fromOffset(SAVED_POS.X, SAVED_POS.Y) or UDim2.new(0, 40, 0, 110)
root.BackgroundColor3 = palette.panel
root.BorderSizePixel = 0
root.Parent = gui
Instance.new("UICorner", root).CornerRadius = UDim.new(0, 18)
local strokeRoot = Instance.new("UIStroke", root) strokeRoot.Color = palette.stroke strokeRoot.Thickness = 2

-- shadow
local shadow = Instance.new("ImageLabel")
shadow.BackgroundTransparency = 1
shadow.Image = "rbxassetid://1316045217"
shadow.ImageTransparency = 0.72
shadow.ImageColor3 = Color3.new(0,0,0)
shadow.ScaleType = Enum.ScaleType.Slice
shadow.SliceCenter = Rect.new(10,10,118,118)
shadow.Size = UDim2.new(1, 30, 1, 30)
shadow.Position = UDim2.fromOffset(-15,-15)
shadow.ZIndex = 0
shadow.Parent = root

-- ribbon
local ribbon = Instance.new("Frame")
ribbon.Size = UDim2.new(0, 64, 1, -28)
ribbon.Position = UDim2.fromOffset(-12, 14)
ribbon.BackgroundColor3 = palette.ribbon
ribbon.BorderSizePixel = 0
ribbon.Parent = root
Instance.new("UICorner", ribbon).CornerRadius = UDim.new(0, 12)
local ribStroke = Instance.new("UIStroke", ribbon) ribStroke.Color = palette.stroke

local ribbonText = Instance.new("TextLabel")
ribbonText.BackgroundTransparency = 1
ribbonText.Size = UDim2.new(1,0,1,0)
ribbonText.Font = Enum.Font.GothamBlack
ribbonText.TextSize = 18
ribbonText.TextColor3 = palette.text
ribbonText.TextWrapped = true
ribbonText.Text = "Culti\nvate\n福利"
ribbonText.Parent = ribbon

-- header
local header = Instance.new("Frame")
header.Size = UDim2.new(1, -78, 0, 50)
header.Position = UDim2.fromOffset(66, 8)
header.BackgroundColor3 = palette.headA
header.BorderSizePixel = 0
header.Parent = root
Instance.new("UICorner", header).CornerRadius = UDim.new(0, 12)
local hStroke = Instance.new("UIStroke", header) hStroke.Color = palette.stroke
local hGrad = Instance.new("UIGradient", header)
hGrad.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, palette.headA),
    ColorSequenceKeypoint.new(1, palette.headB)
}
hGrad.Rotation = 90

local title = Instance.new("TextLabel")
title.BackgroundTransparency = 1
title.Size = UDim2.new(1, -220, 1, 0)
title.Position = UDim2.fromOffset(14,0)
title.Font = Enum.Font.GothamSemibold
title.TextXAlignment = Enum.TextXAlignment.Left
title.TextSize = 20
title.TextColor3 = palette.text
title.Text = "Cultivate Bot"
title.Parent = header

-- Theme toggle & Rebind & Minimize & Start/Stop
local function mkSmallBtn(txt)
    local b = Instance.new("TextButton")
    b.Size = UDim2.fromOffset(32, 30)
    b.BackgroundColor3 = palette.accentA
    b.Text = txt
    b.Font = Enum.Font.GothamBold
    b.TextSize = 16
    b.TextColor3 = Color3.new(1,1,1)
    b.Parent = header
    Instance.new("UICorner", b).CornerRadius = UDim.new(0, 8)
    local st = Instance.new("UIStroke", b) st.Color = palette.stroke
    return b
end

local btnTheme = mkSmallBtn("🎨")
btnTheme.Position = UDim2.new(1, -180, 0.5, -15)

local btnRebind = mkSmallBtn("🔄")
btnRebind.Position = UDim2.new(1, -140, 0.5, -15)

local btnMin = mkSmallBtn("—")
btnMin.Position = UDim2.new(1, -100, 0.5, -15)

local btnToggle = Instance.new("TextButton")
btnToggle.Size = UDim2.fromOffset(110, 34)
btnToggle.Position = UDim2.new(1, -110-12, 0.5, -17)
btnToggle.BackgroundColor3 = palette.accentB
btnToggle.Text = "Start"
btnToggle.TextColor3 = Color3.new(1,1,1)
btnToggle.Font = Enum.Font.GothamSemibold
btnToggle.TextSize = 16
btnToggle.Parent = header
Instance.new("UICorner", btnToggle).CornerRadius = UDim.new(0, 12)
local stToggle = Instance.new("UIStroke", btnToggle) stToggle.Color = palette.stroke
local gradToggle = Instance.new("UIGradient", btnToggle)
gradToggle.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, palette.accentA),
    ColorSequenceKeypoint.new(1, palette.accentB)
}
gradToggle.Rotation = 0
btnToggle.MouseEnter:Connect(function()
    TweenS:Create(btnToggle, TweenInfo.new(0.12), {Size=UDim2.fromOffset(118,36)}):Play()
end)
btnToggle.MouseLeave:Connect(function()
    TweenS:Create(btnToggle, TweenInfo.new(0.12), {Size=UDim2.fromOffset(110,34)}):Play()
end)

-- drag + snapping
do
    local dragging, dragStart, startPos
    header.InputBegan:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 then
            dragging=true; dragStart=i.Position; startPos=root.Position
        end
    end)
    header.InputEnded:Connect(function(i)
        if i.UserInputType==Enum.UserInputType.MouseButton1 then
            dragging=false
            -- snap edges
            local vp = workspace.CurrentCamera.ViewportSize
            local x = math.clamp(root.Position.X.Offset, 10, vp.X - root.Size.X.Offset - 10)
            local y = math.clamp(root.Position.Y.Offset, 10, vp.Y - 80)
            root.Position = UDim2.fromOffset(x, y)
            setAttr("CBot_Pos", Vector2.new(x, y))
        end
    end)
    UIS.InputChanged:Connect(function(i)
        if dragging and i.UserInputType==Enum.UserInputType.MouseMovement then
            local d = i.Position - dragStart
            root.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + d.X, startPos.Y.Scale, startPos.Y.Offset + d.Y)
        end
    end)
end

-- responsive 2-row when narrow
local content = Instance.new("Frame")
content.BackgroundTransparency = 1
content.Size = UDim2.new(1, -92, 1, -88)
content.Position = UDim2.fromOffset(80, 74)
content.Parent = root
local grid = Instance.new("UIGridLayout", content)
grid.CellPadding = UDim2.fromOffset(12, 12)
grid.FillDirectionMaxCells = 3
grid.CellSize = UDim2.new(1/3, -8, 1, -8)

local function updateResponsive()
    local vx = workspace.CurrentCamera.ViewportSize.X
    if vx < 900 then
        grid.FillDirectionMaxCells = 2
        grid.CellSize = UDim2.new(1/2, -8, 1, -8)
    else
        grid.FillDirectionMaxCells = 3
        grid.CellSize = UDim2.new(1/3, -8, 1, -8)
    end
end
workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(updateResponsive)
updateResponsive()

local function mkCard(titleText, icon)
    local card = Instance.new("Frame")
    card.BackgroundColor3 = palette.card
    card.BorderSizePixel = 0
    Instance.new("UICorner", card).CornerRadius = UDim.new(0, 14)
    local cStroke = Instance.new("UIStroke", card) cStroke.Color = palette.stroke cStroke.Thickness = 2

    local head = Instance.new("Frame", card)
    head.Size = UDim2.new(1, -20, 0, 42)
    head.Position = UDim2.fromOffset(10, 10)
    head.BackgroundColor3 = palette.headA
    head.BorderSizePixel = 0
    Instance.new("UICorner", head).CornerRadius = UDim.new(0, 10)
    local hst = Instance.new("UIStroke", head) hst.Color = palette.stroke
    local hgrad = Instance.new("UIGradient", head)
    hgrad.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, palette.headA),
        ColorSequenceKeypoint.new(1, palette.headB)
    }
    hgrad.Rotation = 90

    local tl = Instance.new("TextLabel", head)
    tl.BackgroundTransparency = 1
    tl.Size = UDim2.new(1, 0, 1, 0)
    tl.Font = Enum.Font.GothamBold
    tl.TextSize = 16
    tl.TextColor3 = palette.text
    tl.Text = (icon or "").."  "..titleText

    local body = Instance.new("Frame", card)
    body.Size = UDim2.new(1, -20, 1, -64)
    body.Position = UDim2.fromOffset(10, 56)
    body.BackgroundTransparency = 1

    return card, body
end

-- Card 1: Status
local cardStatus, bodyStatus = mkCard("สถานะ", "🧘")
cardStatus.Parent = content

local statusIcon = Instance.new("TextLabel", bodyStatus)
statusIcon.BackgroundTransparency = 1
statusIcon.Size = UDim2.new(0, 24, 0, 24)
statusIcon.Font = Enum.Font.GothamBold
statusIcon.TextSize = 18
statusIcon.Text = "⏳"
statusIcon.TextColor3 = palette.text

local statusLabel = Instance.new("TextLabel", bodyStatus)
statusLabel.BackgroundTransparency = 1
statusLabel.Position = UDim2.fromOffset(28, 0)
statusLabel.Size = UDim2.new(1, -28, 0, 24)
statusLabel.Font = Enum.Font.Gotham
statusLabel.TextXAlignment = Enum.TextXAlignment.Left
statusLabel.TextSize = 14
statusLabel.TextColor3 = palette.statusWait
statusLabel.Text = "Status: Waiting..."

local progressText = Instance.new("TextLabel", bodyStatus)
progressText.BackgroundTransparency = 1
progressText.Position = UDim2.fromOffset(0, 26)
progressText.Size = UDim2.new(1, 0, 0, 20)
progressText.Font = Enum.Font.Gotham
progressText.TextXAlignment = Enum.TextXAlignment.Left
progressText.TextSize = 14
progressText.TextColor3 = palette.text
progressText.Text = "Progress: — (0%)"

-- progress bar
local barBg = Instance.new("Frame", bodyStatus)
barBg.Position = UDim2.fromOffset(0, 50)
barBg.Size = UDim2.new(1, -10, 0, 14)
barBg.BackgroundColor3 = palette.barBg
barBg.BorderSizePixel = 0
Instance.new("UICorner", barBg).CornerRadius = UDim.new(0, 7)

local barFill = Instance.new("Frame", barBg)
barFill.Size = UDim2.new(0,0,1,0)
barFill.BackgroundColor3 = palette.barFg
barFill.BorderSizePixel = 0
Instance.new("UICorner", barFill).CornerRadius = UDim.new(0, 7)

local errorLabel = Instance.new("TextLabel", bodyStatus)
errorLabel.BackgroundTransparency = 1
errorLabel.Position = UDim2.fromOffset(0, 70)
errorLabel.Size = UDim2.new(1, 0, 0, 18)
errorLabel.Font = Enum.Font.Gotham
errorLabel.TextXAlignment = Enum.TextXAlignment.Left
errorLabel.TextSize = 12
errorLabel.TextColor3 = Color3.fromRGB(200,60,60)
errorLabel.Text = ""

-- Card 2: Control
local cardControl, bodyControl = mkCard("ควบคุม", "⚙️")
cardControl.Parent = content

local bigNumber = Instance.new("TextLabel", bodyControl)
bigNumber.BackgroundTransparency = 1
bigNumber.Size = UDim2.new(1, 0, 0, 34)
bigNumber.Font = Enum.Font.GothamBlack
bigNumber.TextSize = 26
bigNumber.TextColor3 = palette.barFg
bigNumber.Text = "⚡ Breaks: 0"

local actBtn = Instance.new("TextButton", bodyControl)
actBtn.Size = UDim2.fromOffset(160, 42)
actBtn.Position = UDim2.fromOffset(0, 38)
actBtn.BackgroundColor3 = palette.accentB
actBtn.Text = "Start"
actBtn.TextColor3 = Color3.new(1,1,1)
actBtn.Font = Enum.Font.GothamSemibold
actBtn.TextSize = 18
Instance.new("UICorner", actBtn).CornerRadius = UDim.new(0, 12)
local actStroke = Instance.new("UIStroke", actBtn) actStroke.Color = palette.stroke
local actGrad = Instance.new("UIGradient", actBtn)
actGrad.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, palette.accentA),
    ColorSequenceKeypoint.new(1, palette.accentB)
}
actGrad.Rotation = 0
actBtn.MouseEnter:Connect(function()
    TweenS:Create(actBtn, TweenInfo.new(0.12), {Size=UDim2.fromOffset(168,46)}):Play()
end)
actBtn.MouseLeave:Connect(function()
    TweenS:Create(actBtn, TweenInfo.new(0.12), {Size=UDim2.fromOffset(160,42)}):Play()
end)

local tip = Instance.new("TextLabel", bodyControl)
tip.BackgroundTransparency = 1
tip.Position = UDim2.fromOffset(0, 84)
tip.Size = UDim2.new(1, 0, 0, 18)
tip.Font = Enum.Font.Gotham
tip.TextSize = 12
tip.TextColor3 = palette.text
tip.Text = "F8: Start/Stop · RightShift: ซ่อน/แสดง · 🔊: "..(soundOn and "ON" or "OFF")

-- Card 3: Info
local cardInfo, bodyInfo = mkCard("ข้อมูล", "ℹ️")
cardInfo.Parent = content

local lastBreakText = Instance.new("TextLabel", bodyInfo)
lastBreakText.BackgroundTransparency = 1
lastBreakText.Size = UDim2.new(1, 0, 0, 22)
lastBreakText.Font = Enum.Font.Gotham
lastBreakText.TextXAlignment = Enum.TextXAlignment.Left
lastBreakText.TextSize = 14
lastBreakText.TextColor3 = palette.text
lastBreakText.Text = "สุดท้าย: -"

local cooldownText = Instance.new("TextLabel", bodyInfo)
cooldownText.BackgroundTransparency = 1
cooldownText.Position = UDim2.fromOffset(0, 22)
cooldownText.Size = UDim2.new(1, 0, 0, 22)
cooldownText.Font = Enum.Font.Gotham
cooldownText.TextXAlignment = Enum.TextXAlignment.Left
cooldownText.TextSize = 14
cooldownText.TextColor3 = palette.text
cooldownText.Text = "Cooldown: 0.0s"

-- Remote status + Rebind button text
local remoteStatus = Instance.new("TextLabel", bodyInfo)
remoteStatus.BackgroundTransparency = 1
remoteStatus.Position = UDim2.fromOffset(0, 44)
remoteStatus.Size = UDim2.new(1,0,0,20)
remoteStatus.Font = Enum.Font.Gotham
remoteStatus.TextSize = 14
remoteStatus.TextXAlignment = Enum.TextXAlignment.Left
remoteStatus.TextColor3 = palette.text
remoteStatus.Text = "Remote: "..(CultivationEvent and "🟢 OK" or "🔴 Missing")

local logBox = Instance.new("TextLabel", bodyInfo)
logBox.BackgroundTransparency = 1
logBox.Position = UDim2.fromOffset(0, 66)
logBox.Size = UDim2.new(1, 0, 0, 50)
logBox.Font = Enum.Font.Gotham
logBox.TextSize = 12
logBox.TextXAlignment = Enum.TextXAlignment.Left
logBox.TextYAlignment = Enum.TextYAlignment.Top
logBox.TextColor3 = palette.text
logBox.TextWrapped = true
logBox.Text = "-"

local function refreshLog()
    if #miniLog == 0 then logBox.Text = "-" return end
    logBox.Text = table.concat(miniLog, "\n")
end

-- Theme switch
local function applyTheme(newTheme)
    THEME = newTheme
    palette = P[THEME] or P.cream
    -- apply key colors
    root.BackgroundColor3 = palette.panel
    strokeRoot.Color = palette.stroke
    ribbon.BackgroundColor3 = palette.ribbon
    ribStroke.Color = palette.stroke
    header.BackgroundColor3 = palette.headA
    hStroke.Color = palette.stroke
    hGrad.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, palette.headA),
        ColorSequenceKeypoint.new(1, palette.headB)
    }
    title.TextColor3 = palette.text

    local cards = {cardStatus, cardControl, cardInfo}
    for _,c in ipairs(cards) do
        c.BackgroundColor3 = palette.card
        c.UIStroke.Color = palette.stroke
        local h = c:FindFirstChildOfClass("Frame") -- header
        h.BackgroundColor3 = palette.headA
        h.UIStroke.Color = palette.stroke
        h.UIGradient.Color = hGrad.Color
        h.TextLabel.TextColor3 = palette.text
    end
    statusLabel.TextColor3 = palette.statusWait
    progressText.TextColor3 = palette.text
    barBg.BackgroundColor3 = palette.barBg
    barFill.BackgroundColor3 = palette.barFg
    bigNumber.TextColor3 = palette.barFg
    actBtn.BackgroundColor3 = palette.accentB
    actStroke.Color = palette.stroke
    actGrad.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, palette.accentA),
        ColorSequenceKeypoint.new(1, palette.accentB)
    }
    btnToggle.BackgroundColor3 = palette.accentB
    stToggle.Color = palette.stroke
    gradToggle.Color = actGrad.Color
    tip.TextColor3 = palette.text
    lastBreakText.TextColor3 = palette.text
    cooldownText.TextColor3 = palette.text
    remoteStatus.TextColor3 = palette.text
    logBox.TextColor3 = palette.text
    setAttr("CBot_Theme", THEME)
end
applyTheme(THEME)

-------------------- Controls / handlers --------------------
local function setStatus(txt, col, icon)
    statusLabel.Text = "Status: "..txt
    if col then statusLabel.TextColor3 = col end
    statusIcon.Text = icon or "⏳"
end

local function setRunning(on, silent)
    running = on
    local txt = on and "Stop" or "Start"
    btnToggle.Text, actBtn.Text = txt, txt
    gradToggle.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, palette.accentA),
        ColorSequenceKeypoint.new(1, on and palette.accentB or palette.accentA)
    }
    actGrad.Color = gradToggle.Color
    if not silent then
        notify(on and "Bot Started" or "Bot Stopped")
        play(sStart)
    end
    if not on then setStatus("Idle", palette.statusWait, "⏳") end
    setAttr("CBot_Start", on)
end

local function throttle(ms)
    local now = os.clock()
    if now < throttleUntil then return true end
    throttleUntil = now + (ms or 0.25)
    return false
end

local function rebindProgress()
    progressLabel = findProgressLabel()
    if progressLabel then
        pushLog("Rebind: Found progress label.")
        errorLabel.Text = ""
    else
        pushLog("Rebind: Progress not found. Open game Stats once.")
        errorLabel.Text = "❌ ยังหา Progress UI ไม่เจอ (เปิดหน้า Stats สักครั้ง)"
    end
end

btnToggle.MouseButton1Click:Connect(function() if throttle() then return end setRunning(not running) end)
actBtn.MouseButton1Click:Connect(function() if throttle() then return end setRunning(not running) end)
btnMin.MouseButton1Click:Connect(function()
    minimized = not minimized
    setAttr("CBot_Min", minimized)
    local toH = minimized and 86 or 240
    TweenS:Create(root, TweenInfo.new(0.22, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Size = UDim2.fromOffset(780, toH)}):Play()
    content.Visible = not minimized
    btnToggle.Visible = not minimized
    btnMin.Text = minimized and "+" or "—"
end)
btnRebind.MouseButton1Click:Connect(function() if throttle() then return end rebindProgress() end)
btnTheme.MouseButton1Click:Connect(function()
    applyTheme(THEME == "cream" and "jade" or "cream")
end)

-- Hotkeys
UIS.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.RightShift then
        root.Visible = not root.Visible
    elseif input.KeyCode == Enum.KeyCode.F8 then
        setRunning(not running)
    end
end)

-------------------- HUD update --------------------
local function updateHUD(percent, original)
    progressText.Text = string.format("Progress: %s (%d%%)", original, math.floor(percent+0.5))
    barFill.Size = UDim2.new(percent/100, 0, 1, 0)

    if not progressLabel then
        errorLabel.Text = "❌ ยังหา Progress UI ไม่เจอ (เปิดหน้า Stats สักครั้ง)"
    else
        errorLabel.Text = ""
    end

    if isBreakingNow then
        setStatus("Breaking...", palette.statusBreak, "🟠")
    elseif isMeditating then
        setStatus("Meditating...", palette.statusMed, "🟢")
    else
        setStatus("Waiting...", palette.statusWait, "⏳")
    end

    bigNumber.Text = ("⚡ Breaks: %d"):format(breakCount)
    if lastBreakTime > 0 then
        lastBreakText.Text = ("สุดท้าย: %.1fs ที่แล้ว"):format(os.clock() - lastBreakTime)
    end
    local left = math.max(0, DEFAULTS.BREAK_DEBOUNCE - (os.clock() - lastBreakTime))
    cooldownText.Text = ("Cooldown: %.1fs"):format(left)

    remoteStatus.Text = "Remote: "..(CultivationEvent and "🟢 OK" or "🔴 Missing")
    refreshLog()
end

-------------------- Core logic --------------------
local function startMeditate()
    if not isMeditating and not isBreakingNow then
        fire("Cultivate")
        isMeditating = true
    end
end

local function stopMeditate()
    if isMeditating then
        fire("Cultivate")
        isMeditating = false
    end
end

local function doBreakthroughCycle()
    if isBreakingNow then return end
    if os.clock() - lastBreakTime <= DEFAULTS.BREAK_DEBOUNCE then return end
    isBreakingNow = true
    stopMeditate()
    task.wait(DEFAULTS.STAND_UP_DELAY)
    fire("Breakthrough")
    lastBreakTime = os.clock()
    lastAnyBreakAt = os.clock()
    play(sBreak)
    pushLog("✅ Breakthrough")
    task.wait(DEFAULTS.BREAK_DURATION)
    startMeditate()
    isBreakingNow = false
    breakCount += 1
end

-- rebind on respawn
player.CharacterAdded:Connect(function()
    progressLabel = nil
    pushLog("Character respawned. Will rebind UI.")
end)

-- event-first binding: watch for percentage label created
pg.DescendantAdded:Connect(function(d)
    if progressLabel then return end
    if d:IsA("TextLabel") and d.Name=="Percentage" then
        -- light verify by path suffix
        progressLabel = d
        pushLog("UI appeared: progress label bound.")
    end
end)

-- main loop
task.spawn(function()
    while true do
        if not progressLabel then
            progressLabel = findProgressLabel()
        end

        if running then
            local pct, original = parseProgress()

            if (lastPercent==nil) or (math.abs(pct - lastPercent) > 0.001) then
                lastPercent = pct
                lastChangeAt = os.clock()
            end

            if pct >= 100 then
                doBreakthroughCycle()
            else
                local now = os.clock()
                if not isBreakingNow and (now - lastChangeAt) > RECOVERY_TIMEOUT and (now - lastRecoverTry) > DEFAULTS.RECOVERY_COOLDOWN then
                    fire("Cultivate")
                    isMeditating = true
                    lastRecoverTry = now
                    pushLog("Recover: pressed Cultivate")
                end
                startMeditate()
            end

            -- failsafe: 120s no break at all -> restart bot (soft)
            if os.clock() - lastAnyBreakAt > 120 then
                pushLog("Failsafe: Restart bot")
                setRunning(false, true)
                task.wait(0.2)
                setRunning(true, true)
                lastAnyBreakAt = os.clock()
            end

            updateHUD(pct, original)
        end

        task.wait(CHECK_INTERVAL)
    end
end)

-- initial state
minimized = SAVED_MINIMIZED
if minimized then
    content.Visible = false
    root.Size = UDim2.fromOffset(780, 86)
    btnToggle.Visible = false
    btnMin.Text = "+"
end

-- start based on saved preference
setRunning(START_ON_JOIN, true)
updateHUD(0,"—")
