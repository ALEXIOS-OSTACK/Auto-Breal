-- Cultivate Bot (Robust Flow ‚Ä¢ Any Unit ‚Ä¢ Draggable ‚Ä¢ No Spam)

---------------- Services ----------------
local RS         = game:GetService("ReplicatedStorage")
local Players    = game:GetService("Players")
local UIS        = game:GetService("UserInputService")
local StarterGui = game:GetService("StarterGui")

local player = Players.LocalPlayer
local pg     = player:WaitForChild("PlayerGui")

---------------- Remote ------------------
local CultivationEvent = RS:WaitForChild("RemoteEvents"):WaitForChild("CultivationEvent")

---------------- Config ------------------
local CHECK_INTERVAL      = 0.5

local STAND_UP_DELAY      = 0.5
local BREAK_DURATION      = 2.0
local BREAK_DEBOUNCE      = 3.0

-- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô no-flow ‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Å‡∏ß‡πà‡∏≤
local STABLE_TICKS        = 8          -- ‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏¥‡πà‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏¥‡∏Å
local NOFLOW_TIME         = 10.0       -- ‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏¥‡πà‡∏á‡∏ô‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
local STRIKES_TO_RECOVER  = 3          -- ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏à‡∏≠ no-flow ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏∂‡∏á‡∏à‡∏∞ recover
local RECOVERY_COOLDOWN   = 5.0        -- ‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á recover
local START_GRACE_TIME    = 6.0        -- ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏•‡∏±‡∏á recover ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤ settle

local FAILSAFE_SECONDS    = 180        -- ‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á‡∏¢‡∏≤‡∏ß

local FLOW_CAP_SECONDS    = 60         -- ‡πÅ‡∏Ñ‡∏õ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç flow ‡∏ö‡∏ô UI

---------------- Bind UI ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° (‡∏õ‡∏£‡∏±‡∏ö path ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏°) ----------------
local progressLabel = player:WaitForChild("PlayerGui")
  :WaitForChild("ScreenGui")
  :WaitForChild("Sidebar")
  :WaitForChild("Stats")
  :WaitForChild("StatsFrame")
  :WaitForChild("LowerStats")
  :WaitForChild("Percentage")

local qiLabel = player:WaitForChild("PlayerGui")
  :WaitForChild("ScreenGui")
  :WaitForChild("Sidebar")
  :WaitForChild("Stats")
  :WaitForChild("StatsFrame")
  :WaitForChild("UpperStats")
  :WaitForChild("Qi")

---------------- Helpers ------------------
local function parseProgress()
  local t = (progressLabel and progressLabel.Text) or ""
  local numStr = t:match("([%d%.]+)") or "0"
  local raw = tonumber(numStr) or 0
  local percent = (t:find("%%") or raw > 1) and math.clamp(raw,0,100) or math.clamp(raw*100,0,100)
  return percent, numStr, t
end

-- ‡∏≠‡πà‡∏≤‡∏ô Qi ‡πÄ‡∏õ‡πá‡∏ô "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢
local function getQiText()
  local t = (qiLabel and qiLabel.Text) or ""
  local body = t:match("Qi%s*:%s*([%d%.,%s%a]+)$") or ""
  body = body:gsub("%s+", ""):gsub(",", "")
  return (body ~= "" and body) or "‚Äî"
end

---------------- Bot State ----------------
local running        = false
local isMeditating   = false
local isBreakingNow  = false
local lastBreakTime  = 0
local lastAnyBreakAt = os.clock()
local breakCount     = 0

-- ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô ‚Äú‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‚Äù
local lastAliveAt    = os.clock()     -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠ Qi/Progress ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
local sameQiTicks    = 0
local sameProgTicks  = 0
local lastQiText     = getQiText()
local _, _, lastProgText = parseProgress()

local strikes        = 0              -- ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á no-flow ‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
local lastRecoverTry = 0
local startOrRecoverAt = os.clock()   -- ‡πÉ‡∏ä‡πâ grace ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏•‡∏±‡∏á recover

local function fire(action) pcall(function() CultivationEvent:FireServer(action) end) end
local function startMeditate()
  if not isMeditating and not isBreakingNow then
    fire("Cultivate"); isMeditating = true
    -- ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡∏•‡∏≤ settle ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    startOrRecoverAt = os.clock()
  end
end
local function stopMeditate()
  if isMeditating then
    fire("Cultivate"); isMeditating = false
  end
end
local function doBreakthroughCycle()
  if isBreakingNow then return end
  if os.clock() - lastBreakTime <= BREAK_DEBOUNCE then return end
  isBreakingNow = true
  stopMeditate(); task.wait(STAND_UP_DELAY)
  fire("Breakthrough")
  lastBreakTime  = os.clock()
  lastAnyBreakAt = os.clock()
  task.wait(BREAK_DURATION)
  startMeditate()
  isBreakingNow = false
  breakCount += 1
end

---------------- UI (Lite/Draggable/Toggle) ----------------
local UI = {}
do
  local gui = Instance.new("ScreenGui")
  gui.Name = "CultivateBotLite"
  gui.ResetOnSpawn = false
  gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
  gui.DisplayOrder = 1000
  gui.Parent = pg

  local main = Instance.new("Frame")
  main.Size = UDim2.fromOffset(460, 230)
  main.Position = UDim2.new(0.5, -230, 0.18, 0)
  main.BackgroundColor3 = Color3.fromRGB(250,245,235)
  main.BorderSizePixel = 0
  main.Parent = gui
  Instance.new("UICorner", main).CornerRadius = UDim.new(0, 12)
  local stroke = Instance.new("UIStroke", main) stroke.Color = Color3.fromRGB(200,180,150) stroke.Thickness = 2

  local title = Instance.new("TextLabel", main)
  title.BackgroundTransparency = 1
  title.Size = UDim2.new(1, -40, 0, 40)
  title.Position = UDim2.fromOffset(16, 10)
  title.Font = Enum.Font.GothamBlack
  title.TextSize = 22
  title.TextXAlignment = Enum.TextXAlignment.Left
  title.TextColor3 = Color3.fromRGB(80,50,20)
  title.Text = "üåø Cultivate Bot"

  local closeBtn = Instance.new("TextButton", main)
  closeBtn.Size = UDim2.fromOffset(30, 30)
  closeBtn.Position = UDim2.new(1, -35, 0, 5)
  closeBtn.BackgroundColor3 = Color3.fromRGB(220,80,80)
  closeBtn.Text = "X"
  closeBtn.TextColor3 = Color3.new(1,1,1)
  closeBtn.Font = Enum.Font.GothamBold
  closeBtn.TextSize = 18
  Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0, 8)

  local btn = Instance.new("TextButton", main)
  btn.Size = UDim2.fromOffset(140, 46)
  btn.Position = UDim2.new(1, -156, 0, 54)
  btn.BackgroundColor3 = Color3.fromRGB(240,120,100)
  btn.Text = "Start"
  btn.TextColor3 = Color3.new(1,1,1)
  btn.Font = Enum.Font.GothamBold
  btn.TextSize = 20
  Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 10)

  local status = Instance.new("TextLabel", main)
  status.BackgroundTransparency = 1
  status.Size = UDim2.new(1, -32, 0, 28)
  status.Position = UDim2.fromOffset(20, 104)
  status.Font = Enum.Font.Gotham
  status.TextSize = 18
  status.TextXAlignment = Enum.TextXAlignment.Left
  status.TextColor3 = Color3.fromRGB(60,60,60)
  status.Text = "üü° Status: Waiting..."

  local pText = Instance.new("TextLabel", main)
  pText.BackgroundTransparency = 1
  pText.Size = UDim2.new(1, -32, 0, 22)
  pText.Position = UDim2.fromOffset(20, 134)
  pText.Font = Enum.Font.Gotham
  pText.TextSize = 16
  pText.TextXAlignment = Enum.TextXAlignment.Left
  pText.TextColor3 = Color3.fromRGB(60,60,60)
  pText.Text = "Progress: ‚Äî (0%)"

  local qiLine = Instance.new("TextLabel", main)
  qiLine.BackgroundTransparency = 1
  qiLine.Size = UDim2.new(1, -32, 0, 22)
  qiLine.Position = UDim2.fromOffset(20, 158)
  qiLine.Font = Enum.Font.Gotham
  qiLine.TextSize = 16
  qiLine.TextXAlignment = Enum.TextXAlignment.Left
  qiLine.TextColor3 = Color3.fromRGB(60,60,60)
  qiLine.Text = "Qi: ‚Äî  (flow: ‚Äî)"

  local breaksLbl = Instance.new("TextLabel", main)
  breaksLbl.BackgroundTransparency = 1
  breaksLbl.Size = UDim2.new(1, -32, 0, 22)
  breaksLbl.Position = UDim2.fromOffset(20, 182)
  breaksLbl.Font = Enum.Font.Gotham
  breaksLbl.TextSize = 16
  breaksLbl.TextXAlignment = Enum.TextXAlignment.Left
  breaksLbl.TextColor3 = Color3.fromRGB(60,60,60)
  breaksLbl.Text = "‚ö° Breaks: 0"

  -- Dragging
  local dragging, dragStart, startPos
  main.InputBegan:Connect(function(i)
    if i.UserInputType == Enum.UserInputType.MouseButton1 then
      dragging = true; dragStart = i.Position; startPos = main.Position
    end
  end)
  main.InputChanged:Connect(function(i)
    if i.UserInputType == Enum.UserInputType.MouseMovement and dragging then
      local d = i.Position - dragStart
      main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + d.X,
                                startPos.Y.Scale, startPos.Y.Offset + d.Y)
    end
  end)
  UIS.InputEnded:Connect(function(i)
    if i.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end
  end)

  local function setBtn()
    if running then btn.Text="Stop"; btn.BackgroundColor3 = Color3.fromRGB(100,180,120)
    else btn.Text="Start"; btn.BackgroundColor3 = Color3.fromRGB(240,120,100) end
  end

  function UI.updateHUD(pct, pctText, qiText)
    pText.Text = string.format("Progress: %s (%d%%)", pctText, math.floor(pct+0.5))
    if isBreakingNow then status.Text = "üü† Status: Breaking..."
    elseif isMeditating then status.Text = "üü¢ Status: Meditating..."
    elseif running then status.Text = "üü° Status: Running..."
    else status.Text = "üî¥ Status: Stopped" end

    local flow = math.min(os.clock() - lastAliveAt, FLOW_CAP_SECONDS)
    qiLine.Text    = string.format("Qi: %s  (flow: %.1fs ago)", qiText or "‚Äî", flow)
    breaksLbl.Text = ("‚ö° Breaks: %d"):format(breakCount)
  end

  function UI.toggleRun()
    running = not running
    setBtn()
    StarterGui:SetCore("SendNotification", {Title="CultivateBot", Text=(running and "Started" or "Stopped"), Duration=2})
    -- ‡πÉ‡∏´‡πâ grace ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
    startOrRecoverAt = os.clock()
    lastAliveAt      = os.clock()
    sameQiTicks, sameProgTicks, strikes = 0, 0, 0
  end

  btn.MouseButton1Click:Connect(UI.toggleRun)
  closeBtn.MouseButton1Click:Connect(function() main.Visible = false end)
  UIS.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.F8 then UI.toggleRun() end
    if input.KeyCode == Enum.KeyCode.RightShift then main.Visible = not main.Visible end
  end)

  setBtn()
end

-- Hook: ‡∏ñ‡πâ‡∏≤ Qi text ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ alive
if qiLabel then
  qiLabel:GetPropertyChangedSignal("Text"):Connect(function()
    local qt = getQiText()
    if qt ~= lastQiText then
      lastQiText  = qt
      lastAliveAt = os.clock()
      sameQiTicks = 0
    end
  end)
end

---------------- Main Loop ----------------
task.spawn(function()
  while true do
    if running then
      -- Progress
      local pct, pctText, progFullText = parseProgress()

      -- ‡∏ñ‡πâ‡∏≤ progress ‡∏Ç‡∏¢‡∏±‡∏ö => ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ alive
      if progFullText ~= lastProgText then
        lastProgText = progFullText
        lastAliveAt  = os.clock()
        sameProgTicks = 0
      else
        sameProgTicks += 1
      end

      -- Qi (string-based)
      local qiNowText = getQiText()
      if qiNowText ~= lastQiText then
        lastQiText  = qiNowText
        lastAliveAt = os.clock()
        sameQiTicks = 0
      else
        sameQiTicks += 1
      end

      -- ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç no-flow (‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô grace ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢)
      local pastGrace   = (os.clock() - startOrRecoverAt) > START_GRACE_TIME
      local ticksQuiet  = (sameQiTicks >= STABLE_TICKS) and (sameProgTicks >= STABLE_TICKS)
      local timeQuiet   = (os.clock() - lastAliveAt) > NOFLOW_TIME

      if pastGrace and ticksQuiet and timeQuiet and not isBreakingNow then
        -- ‡∏ô‡∏±‡∏ö strikes ‡∏Å‡πà‡∏≠‡∏ô recover
        strikes += 1
        if strikes >= STRIKES_TO_RECOVER and (os.clock() - lastRecoverTry) > RECOVERY_COOLDOWN then
          fire("Cultivate")                  -- ‡∏Å‡∏î‡∏ô‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
          isMeditating    = true
          lastRecoverTry  = os.clock()
          startOrRecoverAt= os.clock()       -- ‡πÄ‡∏£‡∏¥‡πà‡∏° grace ‡πÉ‡∏´‡∏°‡πà
          lastAliveAt     = os.clock()
          sameQiTicks, sameProgTicks, strikes = 0, 0, 0
        end
      else
        -- ‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï strikes
        if (os.clock() - lastAliveAt) <= NOFLOW_TIME then
          strikes = 0
        end
      end

      -- Break ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°
      if pct >= 100 then
        doBreakthroughCycle()
      else
        startMeditate()
      end

      -- Failsafe ‡∏Å‡∏±‡∏ô‡∏Ñ‡πâ‡∏≤‡∏á
      if os.clock() - lastAnyBreakAt > FAILSAFE_SECONDS then
        running = false; task.wait(0.25); running = true; lastAnyBreakAt = os.clock()
        startOrRecoverAt = os.clock()
        lastAliveAt      = os.clock()
        sameQiTicks, sameProgTicks, strikes = 0, 0, 0
      end

      UI.updateHUD(pct, tostring(pct), qiNowText)
    end

    task.wait(CHECK_INTERVAL)
  end
end)

-- init HUD
UI.updateHUD(0, "‚Äî", getQiText())
